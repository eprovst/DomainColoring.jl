var documenterSearchIndex = {"docs":
[{"location":"usage/cvd/#Plotting-for-Color-Vision-Deficiency","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"","category":"section"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"To distinguish phase values without introducing a discontinuity we need to use two stimuli. The shading used by domaincolor uses green-magenta and blue-yellow color opponents (i.e. a full rainbow), with only slight variation in lightness to enhance local contrast. This leaves lightness to display contour lines of the magnitude, but is problematic for viewers with color vision deficiency. For them, these color opponents are not (fully) distinguishable and hence the plot is rendered unreadable.","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"DomainColoring.jl hence provides alternative phase plots that are clearly readable to them, based on color maps developed by Peter Kovesi.","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"note: Note\nThese color maps can also be used in the other plots as :pd/:CBC1 and :t/:CBTC1, respectively. However do note that their use of black and white might interfere with other plotting elements.","category":"page"},{"location":"usage/cvd/#Phase-plots-for-protanopia-and-deuteranopia","page":"Plotting for Color Vision Deficiency","title":"Phase plots for protanopia and deuteranopia","text":"","category":"section"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"For these viewers it is difficult to distinguish red and green hues. The method pdphaseplot hence uses lightness and a yellow-blue sweep to display phase instead.","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"using CairoMakie, DomainColoring # hide\npdphaseplot(z -> exp(1/z), 0.5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"pdphaseexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"(Image: )","category":"page"},{"location":"usage/cvd/#Phase-plots-for-titranopia","page":"Plotting for Color Vision Deficiency","title":"Phase plots for titranopia","text":"","category":"section"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"For these viewers it is difficult to distinguish blue and yellow hues. The method tphaseplot hence uses lightness and a red-cyan sweep to display phase instead.","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"using CairoMakie, DomainColoring # hide\ntphaseplot(z -> exp(1/z), 0.5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"tphaseexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/cvd/","page":"Plotting for Color Vision Deficiency","title":"Plotting for Color Vision Deficiency","text":"(Image: )","category":"page"},{"location":"usage/general/#General-Overview","page":"General Overview","title":"General Overview","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"note: Note\nDomainColoring.jl provides plots on top of either the Plots.jl or Makie frameworks, thus a user will have to additionally install and load a backend.","category":"page"},{"location":"usage/general/#Common-options","page":"General Overview","title":"Common options","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"All plotting functions require a function mathbbC to mathbbC as first argument and accept optionally axis limits as a second.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"If no limits are provided by default unit length is taken in all four directions. If a list of two numbers is provided the first is used as both limit in the real direction and the second in the imaginary direction. A list of four elements are interpreted as (rm Re_rm min rm Re_rm max rm Im_rm min rm Im_rm max).","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"All plots have a keyword argument pixels by which one can specify the number of samples in respectively the real and imaginary direction. If only one number is provided it is used for both.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Additionally there is also the option to fill in a box, or list of boxes in the output space using the option box, which is illustrated in the section on checkerplot and sawplot.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Finally, any remaining keywords are passed to the backend. This, together with the modifying variants (domaincolor!, checkerplot!, etc.), makes the plotting routines in this library behave similarly to other plot types. For more information we refer to the Plots.jl and Makie documentation.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"The remainder of this page gives a quick overview of the main plotting functions of DomainColoring.jl.","category":"page"},{"location":"usage/general/#The-[domaincolor](@ref)-function","page":"General Overview","title":"The domaincolor function","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"note: Note\nThe phase output of domaincolor is generally not suited for those with color vision deficiency, refer to Plotting for Color Vision Deficiency instead.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"By default domaincolor produces a phase plot such as the following.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sinc, (3, 1.5))\nresize!(current_figure(), 620, 340) #hide\nsave(\"dcsincphase.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"One can additionally superimpose contour lines of the magnitude as sweeps of increasing lightness by setting abs = true. Where this increase of lightness is taken proportional to the fractional part of logf(z).","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sinc, (3, 1.5), abs=true)\nresize!(current_figure(), 620, 340) #hide\nsave(\"dcsincabs.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Finally, one can also add a dark grid where the imaginary or real part of f(z) is integer by setting grid = true.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sinc, (3, 1.5), grid=true)\nresize!(current_figure(), 620, 340) #hide\nsave(\"dcsincgrid.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Of course these options can be combined, the common combination of abs = true and grid = true even has an abbreviation all = true.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sinc, (3, 1.5), all=true)\nresize!(current_figure(), 620, 340) #hide\nsave(\"dcsincall.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"The argument interface contains many further options, but we will delay their discussion until after introducing the checkerplot and sawplot functions.","category":"page"},{"location":"usage/general/#The-[checkerplot](@ref)-and-[sawplot](@ref)-functions","page":"General Overview","title":"The checkerplot and sawplot functions","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"A checker plot shows limited information and is useful to detect patterns in certain contexts. By default a checker board pattern is used with one stripe for an unit increase in either direction. A checkerplot of the identity function makes this clearer.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ncheckerplot(z -> z, 5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cprect.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"A saw plot is similar but shows ramps instead of solid stripes, to get an idea of the direction of increase. Their interface is almost identical, so we'll use them interchangeably for most examples.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"The previous example as a saw plot would be:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\nsawplot(z -> z, 5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"sprect.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"You can limit the stripes to only show increase in the real or imaginary part by setting real = true or imag = true, respectively. Again the previous example.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ncheckerplot(z -> z, 5, real=true)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cpreal.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Setting real = true and imag = true can be abbreviated to rect = true, which is identical to the default behaviour.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Alternatively one can also display a polar grid by setting polar = true, giving one band per unit increase of logf(z) and eight bands per 2pi increase of arg(f(z)).","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\nsawplot(z -> z, 5, polar=true)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cppolar.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"As with rect = true, polar = true is an abbreviation for abs = true and angle = true, showing magnitude and phase respectively. Now is a good time to mention that most arguments discussed so far also accept numbers, modifying the width or rate of the stripes. For example, we can change the basis of the logarithm used for the magnitude (alternatively one can also pass a function as in domaincolor, see next section):","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ncheckerplot(z -> z, 5, abs=1.1)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cpabs.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"and for phase:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\nsawplot(z -> z, 5, angle=10)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cpangle.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Note, that for a checkerplot the latter we needs to be an even number. If we set phase to a number, this will be used for abs and a suitable integer rate will be chosen for angle, for instance:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ncheckerplot(sin, (5, 2), polar=1.5)\nresize!(current_figure(), 620, 280) #hide\nsave(\"cppolarsin.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"As mentioned before regions of the output plane can be colored using the box option, for example:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ncheckerplot(z -> z^2, 2, box=[(1,1im,:red), (-1-2im,-2-1im,:blue)])\nresize!(current_figure(), 620, 600) #hide\nsave(\"cpboxes.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Finally, hicontrast = true can be used in checkerplot to plot in black and white instead of the slightly softer defaults, and color = true mixes phase coloring into a sawplot (further possibilities of this option are identical to domaincolor, as discussed at the end of the next section).","category":"page"},{"location":"usage/general/#The-[domaincolor](@ref)-function,-revisited","page":"General Overview","title":"The domaincolor function, revisited","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Like checkerplot and sawplot, abs and grid also accept numbers. Respectively, changing the basis of the used logarithm and the rate of the grid. Additionally, we can pass named tuples to open up even more options.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"For grid these options are identical to checkerplot, for example an analogous example to the penultimate one of last section, is given by:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sin, (5, 2), grid=(polar=1.5,))\nresize!(current_figure(), 620, 280) #hide\nsave(\"dcpolarsin.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Note: unlike before, the rate of angle need not be even for grids.)","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"The abs argument accepts a different basis from the default e, if we for instance wanted to see orders of magnitude, we could look at:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> z^3, 5, abs=10)\nresize!(current_figure(), 620, 600) #hide\nsave(\"dcordermag.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"If one does not want to look at the logarithm of the magnitude, but the magnitude itself, they can use the transform option, or pass a function directly to abs, for instance:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sqrt, (-1, 19, -4, 4), abs=z->z)\nresize!(current_figure(), 620, 280) #hide\nsave(\"dclinmag.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Finally, if we set the base to Inf, the magnitude is colored from black at zero to white at infinity, which we can use to illustrate the Casorati–Weierstrass theorem:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> exp(1/z), .1, abs=Inf)\nresize!(current_figure(), 620, 600) #hide\nsave(\"cwthm.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"The harshness of these white an black areas can be changed using the sigma parameter, try for instance:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"domaincolor(z -> exp(1/z), .1, abs=(sigma=0.001,))","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"If one wants to change the coloring of the phase angle, they can pass a ColorScheme (as an object or by name, see their documentation) or a function θ -> Color, to color. As an example of the latter, we can add a discretization effect:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\ndiscrangle(θ) = DomainColoring.labsweep(π/10 * floor(10/π * θ))\ndomaincolor(tan, color=discrangle)\nresize!(current_figure(), 620, 600) #hide\nsave(\"dsccolor.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"(Image: )","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Finally, if no coloring of the phase is wanted, we can set color = false.","category":"page"},{"location":"usage/general/#The-Riemann-sphere","page":"General Overview","title":"The Riemann sphere","text":"","category":"section"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"To close, let us demonstrate how you can combine plots in the Makie framework to plot the two hemispheres of the Riemann sphere side to side.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"Separately these would be for some function f, say sin","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\nf = sin\ndomaincolor(z -> abs(z) <= 1 ? f(z) : NaN)\nresize!(current_figure(), 620, 600) #hide\ncurrent_figure() #hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"and","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie, DomainColoring # hide\nf = sin #hide\ndomaincolor(z -> abs(z) <= 1 ? f(1/z) : NaN)\nresize!(current_figure(), 620, 600) #hide\ncurrent_figure() #hide","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"where we used that NaN is shown transparent by the plots of this package.","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"In Makie a layout of Axis objects is collected in a Figure, we can position them by indexing the figure. Two axes side by side would for instance be:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using CairoMakie\n\nfig = Figure()\nax11 = Axis(fig[1,1])\nax12 = Axis(fig[1,2])\nresize!(fig, 620, 400) #hide\nfig","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"As a final complication, domaincolor! can't change the aspect ratio of a plot, hence we have to set it to square at the time of creation, giving finally the function (where we also pass keyword arguments):","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"function riemann(f; kwargs...)\n    fig = Figure()\n    ax11 = Axis(fig[1,1], aspect=1)\n    domaincolor!(ax11, z -> abs(z) <= 1 ? f(z) : NaN; kwargs...)\n    ax12 = Axis(fig[1,2], aspect=1)\n    domaincolor!(ax12, z -> abs(z) <= 1 ? f(1/z) : NaN; kwargs...)\n    fig\nend","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"For the sine function this for instance gives:","category":"page"},{"location":"usage/general/","page":"General Overview","title":"General Overview","text":"using DomainColoring, CairoMakie # hide\nfunction riemann(f; kwargs...) # hide\n    fig = Figure() # hide\n    ax11 = Axis(fig[1,1], aspect=1) # hide\n    domaincolor!(ax11, z -> abs(z) <= 1 ? f(z) : NaN; kwargs...) # hide\n    ax12 = Axis(fig[1,2], aspect=1) # hide\n    domaincolor!(ax12, z -> abs(z) <= 1 ? f(1/z) : NaN; kwargs...) # hide\n    fig # hide\nend # hide\nriemann(sin, abs=true)\nresize!(current_figure(), 620, 300) #hide\ncurrent_figure() #hide","category":"page"},{"location":"lib/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/#Public-Interface","page":"Library","title":"Public Interface","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [DomainColoring]\nPrivate = false","category":"page"},{"location":"lib/#DomainColoring.checkerplot","page":"Library","title":"DomainColoring.checkerplot","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.checkerplot!","page":"Library","title":"DomainColoring.checkerplot!","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.domaincolor","page":"Library","title":"DomainColoring.domaincolor","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces it's domain coloring plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.domaincolor!","page":"Library","title":"DomainColoring.domaincolor!","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces it's domain coloring plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.pdphaseplot","page":"Library","title":"DomainColoring.pdphaseplot","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.pdphaseplot!","page":"Library","title":"DomainColoring.pdphaseplot!","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.sawplot","page":"Library","title":"DomainColoring.sawplot","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.sawplot!","page":"Library","title":"DomainColoring.sawplot!","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.tphaseplot","page":"Library","title":"DomainColoring.tphaseplot","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.tphaseplot!","page":"Library","title":"DomainColoring.tphaseplot!","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (720, 720),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the number of pixels to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#Package-Internals","page":"Library","title":"Package Internals","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [DomainColoring]\nPublic = false","category":"page"},{"location":"lib/#DomainColoring.checkerplotshader-Tuple{Any}","page":"Library","title":"DomainColoring.checkerplotshader","text":"DomainColoring.checkerplotshader(\n    w :: Complex;\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n)\n\nTakes a complex value w and shades it as in a checker plot.\n\nFor documentation of the remaining arguments see checkerplot.\n\n\n\n\n\n","category":"method"},{"location":"lib/#DomainColoring.domaincolorshader-Tuple{Any}","page":"Library","title":"DomainColoring.domaincolorshader","text":"DomainColoring.domaincolorshader(\n    w :: Complex;\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n)\n\nTakes a complex value w and shades it as in a domain coloring.\n\nFor documentation of the remaining arguments see domaincolor.\n\n\n\n\n\n","category":"method"},{"location":"lib/#DomainColoring.labsweep-Tuple{Any}","page":"Library","title":"DomainColoring.labsweep","text":"DomainColoring.labsweep(θ)\n\nMaps a phase angle θ to a color in CIE L*a*b* space by taking\n\nbeginaligned\n      L^* = 67 - 12 cos(3theta) \n      a^* = 46 cos(theta + 4) - 3 quadtextand \n      b^* = 46 sin(theta + 4) - 16\n  endaligned\n\nSee Phase Wheel for more information.\n\n\n\n\n\n","category":"method"},{"location":"lib/#DomainColoring.renderimage","page":"Library","title":"DomainColoring.renderimage","text":"DomainColoring.renderimage(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (720, 720),\n)\n\nArguments\n\nf is the complex function to turn into an image.\nshader is the shader function to compute a pixel.\nlimits are the limits of the rectangle to render, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.renderimage!-Union{Tuple{C}, Tuple{Matrix{C}, Any, Any}, Tuple{Matrix{C}, Any, Any, Any}} where C","page":"Library","title":"DomainColoring.renderimage!","text":"DomainColoring.renderimage!(\n    out :: Matrix{<: Color},\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n)\n\nArguments\n\nout is the output image buffer.\nf is the complex function to turn into an image.\nshader is the shader function to compute a pixel.\nlimits are the limits of the rectangle to render, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\n\n\n\n\n","category":"method"},{"location":"lib/#DomainColoring.sawplotshader-Tuple{Any}","page":"Library","title":"DomainColoring.sawplotshader","text":"DomainColoring.sawplotshader(\n    w :: Complex;\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n)\n\nTakes a complex value w and shades it as in a saw plot.\n\nFor documentation of the remaining arguments see sawplot.\n\n\n\n\n\n","category":"method"},{"location":"lib/#DomainColoring.shadedplot","page":"Library","title":"DomainColoring.shadedplot","text":"DomainColoring.shadedplot(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (720, 720);\n    kwargs...\n)\n\nTakes a complex function f and a shader and produces a plot.\n\nFor documentation of the remaining arguments see renderimage.\n\nKeyword arguments are passed to the backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.shadedplot!","page":"Library","title":"DomainColoring.shadedplot!","text":"DomainColoring.shadedplot(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (720, 720);\n    kwargs...\n)\n\nTakes a complex function f and a shader and produces a plot.\n\nFor documentation of the remaining arguments see renderimage.\n\nKeyword arguments are passed to the backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoring.@shadedplot-Tuple{Any, Any, Any}","page":"Library","title":"DomainColoring.@shadedplot","text":"DomainColoring.@shadedplot(basename, shaderkwargs, shader)\n\nMacro emitting implementations of basename and basename! in a similar fashion to the other plotting routines in this library, see for instance domaincolor and domaincolor!.\n\nshaderkwargs is a named tuple setting keyword arguments used in the expression shader. The result of shader should be a function Complex -> Color and is used to shade the resulting plot.\n\nSee the source for examples.\n\n\n\n\n\n","category":"macro"},{"location":"design/phasewheel/#Phase-Wheel","page":"Phase Wheel","title":"Phase Wheel","text":"","category":"section"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"Creating a perceptually smooth color wheel is in general a difficult task, and comes with inherent compromises. This document serves to list the design decisions taken for the phase wheel used in our implementation of domain coloring. We carefully selected the following analytical sweep through CIE L*a*b* space:","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"beginaligned\n    L^* = 67 - 12 cos(3theta)\n    a^* = 46 cos(theta + 4) - 3quadtextand\n    b^* = 46 sin(theta + 4) - 16\nendaligned","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"This is implemented by the internal function DomainColoring.labsweep, giving the following phase wheel.","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"using DomainColoring, Colors #hide\nshowable(::MIME\"text/plain\", ::AbstractVector{C}) where {C<:Colorant} = false #hide\nDomainColoring.labsweep.(0:.01:2π)","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"The main problem in the usually used HSV map is the erratic nature of everything, creating false detail, making certain parts of the phase look longer than others, etc. Unlike, HSV our peaks and troughs are equispaced, and smooth.","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"Lightnesswise the entire range is separated into six equal parts. For usual data analysis it would be better to minimise the number of oscillations, however for our purposes the turning points serve as visual anchors dividing the phase range. Note that some lightness variation is wanted, as our eyes mainly rely on lightness to discern higher frequency information[1].","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"The target color space is sRGB, so adding dips in lightness near its red, green, and blue primaries buys us more range in additional lightness variation to show magnitude in more complicated plots. This way we have only slight clipping in sRGB space when adding the lightness variations used to show magnitude changes in domaincolor.","category":"page"},{"location":"design/phasewheel/","page":"Phase Wheel","title":"Phase Wheel","text":"[1]: Kovesi, Peter. (2015). \"Good Colour Maps: How to Design Them.\"  arXiv:abs/1509.03700.","category":"page"},{"location":"usage/tutorial/#Basic-Tutorial","page":"Basic Tutorial","title":"Basic Tutorial","text":"","category":"section"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"note: Note\nIf you're experienced with Julia and phase plots, this document might be fairly basic. Continue to the General Overview instead.","category":"page"},{"location":"usage/tutorial/#Installation,-loading,-Makie-and-Plots.jl","page":"Basic Tutorial","title":"Installation, loading, Makie and Plots.jl","text":"","category":"section"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"DomainColoring.jl provides plotting routines for complex functions. These require either the Makie or Plots.jl plotting libraries. In this tutorial we will use the former.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"Makie supports multiple backends, one of which has to be loaded to display the resulting plot. There are two main options:","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"GLMakie for interactive plots, and\nCairoMakie for publication quality plots.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"In this tutorial we will use CairoMakie to provide output for the documentation, but whilst following along you might want to use GLMakie instead.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"To install DomainColoring.jl and either of these packages, enter","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"]add DomainColoring GLMakie","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"or","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"]add DomainColoring CairoMakie","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"into the Julia REPL. (To return to the Julia REPL after this, simply press backspace.)","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"After installation your session should in general start with either","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using GLMakie, DomainColoring","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"for interactive work, or for publication graphics with","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring","category":"page"},{"location":"usage/tutorial/#Plotting-our-first-few-phase-plots","page":"Basic Tutorial","title":"Plotting our first few phase plots","text":"","category":"section"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"Julia supports the passing of functions as arguments, even better, it supports the creation of so called 'anonymous' functions. We can for instance write the function that maps an argument z to 2z + 1 as","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"z -> 2z + 1","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"Let us now see how the phase of this function behaves in the complex plane. First, if you haven't already, we need to load DomainColoring.jl and an appropriate backend (our suggestion is GLMakie if you're experimenting from the Julia REPL):","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"Then a simple phase plot can be made using","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> 2z + 1)\nresize!(current_figure(), 620, 600) #hide\nsave(\"simplephaseexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"(Image: )","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"As expected we see a zero of multiplicity one at -05, furthermore we see that domaincolor defaults to unit axis limits in each direction.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"Something useful to know about phase plots, the order of the colors tells you more about the thing you are seeing:","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"red, green and blue (anticlockwise) is a zero; and\nred, blue and green is a pole.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"The number of times you go through these colors gives you the multiplicity. A pole of multiplicity two gives for instance:","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> 1 / z^2)\nresize!(current_figure(), 620, 600) #hide\nsave(\"simplepoleexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"(Image: )","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"We've now looked at poles and zeroes, another interesting effect to see on a phase plot are branch cuts. Julia's implementation of the square root has a branch cut on the negative real axis, as we can see on the following figure.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(sqrt, [-10, 2, -2, 2])\nresize!(current_figure(), 620, 250) #hide\nsave(\"sqrtexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"(Image: )","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"There are a couple of things of note here. First, Julia allows us to simply pass sqrt, which here is equivalent to z -> sqrt(z). Second, domaincolor accepts axis limits as an optional second argument (for those familiar with Julia: any indexable object will work). Finally, branch cuts give discontinuities in the phase plot (identifying these is greatly helped by the perceptual uniformity of the Phase Wheel used).","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"We conclude by mentioning that you do not always need to specify all limits explicitly. If you want to take the same limit in all four directions you can simply pass that number. When you pass a vector with only two elements, these will be taken symmetric in the real and imaginary direction respectively. This way we can zoom in on the beauty of the essential singularity of e^frac1z.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> exp(1/z), 0.5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"essentialsingexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"(Image: )","category":"page"},{"location":"usage/tutorial/#Plotting-the-DomainColoring.jl-logo","page":"Basic Tutorial","title":"Plotting the DomainColoring.jl logo","text":"","category":"section"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"As a final example, let us show off a few more capabilities of the domaincolor function by plotting the DomainColoring.jl logo.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"This is a plot of f(z) = z^3i - 1 with level curves of the logarithm of the magnitude and an integer grid. You can continue by reading the General Overview to learn more about these and other additional options, and the other provided plotting functions.","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"using CairoMakie, DomainColoring # hide\ndomaincolor(z -> im*z^3-1, 2.5, all=true)\nresize!(current_figure(), 620, 600) #hide\nsave(\"logoexample.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/tutorial/","page":"Basic Tutorial","title":"Basic Tutorial","text":"(Image: )","category":"page"},{"location":"#DomainColoring.jl:-Smooth-Complex-Plotting","page":"Home","title":"DomainColoring.jl: Smooth Complex Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of the DomainColoring.jl package, a small collection of various ways to plot complex functions, supporting Plots.jl and Makie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div align=\"center\">\n  <img src=\"assets/logo.png\" width=300 />\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots implemented here are inspired by the wonderful book by Wegert[1], yet using a smooth (technically analytic) curve through CIE L*a*b* space, yielding a more perceptually uniform representation of the phase (see Phase Wheel).","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: Wegert, Elias. Visual Complex Functions: An Introduction with Phase Portraits. Birkhäuser Basel, 2012.","category":"page"},{"location":"dct/#DomainColoringToy","page":"DomainColoringToy","title":"DomainColoringToy","text":"","category":"section"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"DomainColoringToy is an auxiliary package building on DomainColoring.jl which preloads GLMakie and rerenders the plot when the user zooms in or pans around.","category":"page"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"The exported functions and arguments are identical to DomainColoring.jl with the addition of the acceptance of :auto in place of an integer in the pixels keyword argument. A direction which is set to :auto will use the viewport resolution to determine the number of samples. Note that this can make plotting very slow.","category":"page"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"Finally, in a similar fashion to DomainColoring.@shadedplot, one can use DomainColoringToy.@shadedplot to create custom plots.","category":"page"},{"location":"dct/#Installation","page":"DomainColoringToy","title":"Installation","text":"","category":"section"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"DomainColoringToy is a different package and hence has to be installed separately. Installation is as usual:","category":"page"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"]add DomainColoringToy","category":"page"},{"location":"dct/#Library","page":"DomainColoringToy","title":"Library","text":"","category":"section"},{"location":"dct/#Public-Interface","page":"DomainColoringToy","title":"Public Interface","text":"","category":"section"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"Modules = [DomainColoringToy]\nPrivate = false","category":"page"},{"location":"dct/#DomainColoringToy.checkerplot","page":"DomainColoringToy","title":"DomainColoringToy.checkerplot","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"dct/#DomainColoringToy.domaincolor","page":"DomainColoringToy","title":"DomainColoringToy.domaincolor","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces it's domain coloring plot as an interactive GLMakie plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"dct/#DomainColoringToy.pdphaseplot","page":"DomainColoringToy","title":"DomainColoringToy.pdphaseplot","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers as an interactive GLMakie plot.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"dct/#DomainColoringToy.sawplot","page":"DomainColoringToy","title":"DomainColoringToy.sawplot","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"dct/#DomainColoringToy.tphaseplot","page":"DomainColoringToy","title":"DomainColoringToy.tphaseplot","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers as an interactive GLMakie plot.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"dct/#Package-Internals","page":"DomainColoringToy","title":"Package Internals","text":"","category":"section"},{"location":"dct/","page":"DomainColoringToy","title":"DomainColoringToy","text":"Modules = [DomainColoringToy]\nPublic = false","category":"page"},{"location":"dct/#DomainColoringToy.shadedplot","page":"DomainColoringToy","title":"DomainColoringToy.shadedplot","text":"DomainColoringToy.shadedplot(\n    f :: \"Complex -> Complex\",\n    shader :: \"Complex -> Color\",\n    limits = (-1, 1, -1, 1),\n    pixels = (480, 480);\n    kwargs...\n)\n\nTakes a complex function and a shader and produces a GLMakie plot with auto updating.\n\nArguments\n\nf is the complex function to plot.\nshader is the shader function to compute a pixel.\nlimits are the initial limits of the plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nKeyword arguments are passed to GLMakie.\n\n\n\n\n\n","category":"function"},{"location":"dct/#DomainColoringToy.@shadedplot-Tuple{Any, Any, Any}","page":"DomainColoringToy","title":"DomainColoringToy.@shadedplot","text":"DomainColoringToy.@shadedplot(\n    basename,\n    shaderkwargs,\n    shader\n)\n\nMacro emitting an implementation of fname in a similar fashion to the other plotting routines in this library, see for instance domaincolor.\n\nshaderkwargs is a named tuple setting keyword arguments used in the expression shader. The result of shader should be a function Complex -> Color and is used to shade the resulting plot.\n\nSee the source for examples.\n\n\n\n\n\n","category":"macro"},{"location":"usage/custom/#Creating-Custom-Plots","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"","category":"section"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"The underlying architecture of DomainColoring is fairly straightforward. A shader function (a map from complex numbers to colors) is applied to the input function f applied to some grid.","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"The specification of this grid, the pixels option, the axis limiting and the interface with Makie are identical throughout DomainColoring and stem from the internal macro @shadedplot.","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"An example makes this clear. Let's say we want a plot where integer grid lines of the real part and the imaginary part in different colors. A shader implementing this could be:","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"using DomainColoring, Colors\n\nfunction shader(w, realcol, imagcol)\n    r, i = reim(w)\n    c = weighted_color_mean(abs(sinpi(r))^.06, colorant\"white\", realcol)\n    weighted_color_mean(abs(sinpi(i))^.06, c, imagcol)\nend","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"Turning this into a plotting function is then as simple as:","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"import DomainColoring: @shadedplot\n\n@shadedplot(cgridplot,\n    (realcol = colorant\"red\", imagcol = colorant\"blue\"),\n    w -> shader(w, realcol, imagcol))","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"This produces functions cgridplot and cgridplot!. Which give plots like:","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"using CairoMakie\nusing DomainColoring, Colors # hide\nfunction shader(w, realcol, imagcol) # hide\n    r, i = reim(w) # hide\n    c = colorant\"white\" # hide\n    c = weighted_color_mean(abs(sinpi(r))^.06, c, realcol) # hide\n    weighted_color_mean(abs(sinpi(i))^.06, c, imagcol) # hide\nend # hide\nimport DomainColoring: @shadedplot # hide\n@shadedplot(cgridplot, # hide\n    (realcol = colorant\"red\", imagcol = colorant\"blue\"), # hide\n    w -> shader(w, realcol, imagcol)) # hide\n\ncgridplot(z -> im*z^3-1, 2.5)\nresize!(current_figure(), 620, 600) #hide\nsave(\"example.png\", current_figure()) # hide\nnothing # hide","category":"page"},{"location":"usage/custom/","page":"Creating Custom Plots","title":"Creating Custom Plots","text":"(Image: )","category":"page"}]
}
